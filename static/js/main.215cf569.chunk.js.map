{"version":3,"sources":["logo.svg","components/TodoForm.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInput","bind","assertThisInitialized","handleSubmit","e","_e$target","target","value","name","setState","defineProperty","preventDefault","props","onAddTodo","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","NavBar","href","todos","length","App","handleAddTodo","todo","concat","toConsumableArray","index","filter","i","_this2","map","key","onClick","removeTodo","components_NavBar","components_TodoForm","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.215cf569.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n    constructor(){\n        super();\n        this.state = {\n            title: '',\n            responsible: '',\n            description: '',\n            priority: 'low'\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleInput(e) {\n        const {value, name} = e.target;\n        this.setState({\n            [name]: value\n        })\n       \n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onAddTodo(this.state);\n    }\n\n    render() {\n        return (\n            <div className=\"card\">\n                <form className=\"card-body\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            onChange={this.handleInput}\n                            className=\"form-control\"\n                            placeholder=\"Title\"\n                            />\n                    </div>\n                    <div className=\"form-group\">\n                        <input \n                            type=\"text\"\n                            name=\"responsible\"\n                            className=\"form-control\"\n                            placeholder=\"Responsible\"\n                            onChange={this.handleInput}\n                            />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            placeholder=\"Description\"\n                            onChange={this.handleInput} \n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <select\n                            name=\"priority\"\n                            className=\"form-control\"\n                            onChange={this.handleInput}\n                           >\n                            <option>low</option>\n                            <option>medium</option>\n                            <option>high</option>\n                           </select>\n                    \n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Save\n                    </button>\n                </form>\n\n            </div>\n        )\n    }\n}\n\nexport default TodoForm;","import React, { Component } from 'react';\nimport { todos } from '../todos.json';\n\n\nclass NavBar extends Component{\n    render() {\n        return(\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <a href=\"\" className=\"text-white\"> \n                Tasks\n                <span className=\"badge badge-pill badge-light ml-2\"> \n                    {todos.length} \n                </span>\n                </a>\n             </nav>\n        );\n    }\n}\n\nexport default NavBar;","/* En esta seccion se importan las dependencias. \n  Para que este componente (App.js) funcione correctamente se deben\n  declarar las direcciones de los demas componentes*/\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { todos } from './todos.json';\nimport TodoForm from './components/TodoForm';\nimport NavBar from './components/NavBar';\n\n\n/* Esta seccion es el cuerpo de toda la App.js, es el 'Single Page Application' */\nclass App extends Component {//Se crea una clase App que hereda de \n                              //Component <-- Importado en la seccion superior.\n\n/* Aqui se define el constructor: El constructor se utiliza solo para 2 cosas\n    1- Para inicializar un estado local asignando un objeto al this.state.\n    2- Para enlazar manejadores de eventos a una instancia. \n    El constructor es el único lugar donde debes asignar this.state directamente. \n    En todos los demás métodos, debes usar this.setState() en su lugar.*/                            \n  constructor(){\n    super();  // Siempre que se llama al constructor, debe llamarse a super()\n                // super() es necesario porque trae todas las propiedades del constructor.\n    this.state = { todos }  // Asigna al estado actual los objetos del array 'todos'\n    this.handleAddTodo = this.handleAddTodo.bind(this);  //Esto se hace cuando se pierde el Scope\n  }\n\n\n  // Aqui se define una funcion que setea el estado actual (osea añade una nueva tarea)\n  // Funciona de la siguiente manera: la propiedad onAddTodo del componente TodoForm.js\n  // le pasa el estado (de TodoForm.js que seria una tarea nueva) como parametro a handleAddTodo\n  // y esta funcion (handleAddTodo) lo concatena con los demas objetos o tareas en este caso\n  handleAddTodo(todo) {\n    this.setState({  //Aca setea\n      todos: [...this.state.todos, todo]  //Aca lo concatena\n    })\n  } \n\n  \n\n  // Esta funcion remueve o elimina una tarea\n  removeTodo(index) {\n    this.setState({  // El metodo filter, devuelve los objetos que cumplan con la condicion\n        todos: this.state.todos.filter((e, i) => {  // es decir, devuelve todos los objetos que sean distinto\n          return i !== index})          // del indice 'index', osea al que es igual a index lo elimina\n                                        // o mejor dicho, no lo agrega al array todos.\n    })\n  }\n\n\n  // Aqui se llama al metodo render, que renderiza la pantalla o la interfaz, es decir pinta la pantalla\n  // El metodo render siempre debe ser llamado si se crea una clase que hereda de component\n  render() {\n\n  // Aqui itera el array 'todos' que se encuentra en el estado actual, almacenandolo en una constante \n  // 'todos' con un formato de tarjeta, luego esta constante 'todos' es retornado para pintar por pantalla\n  // todos aquellos objetos que fueron guardados en esta constante\n    const todos = this.state.todos.map((todo, i) => {\n       \n      return(\n        \n        <div className=\"col-md-4\" key={i}>\n\n            <div className=\"card mt-4\">\n              \n                  <div className=\"card-header\">\n                   \n                    <h3>{todo.title}</h3>\n                    \n                    <span className=\"badge badge-pill badge-danger ml-2\">\n                      {todo.priority}\n                    </span>\n                  \n                    <h6 className=\"\">\n                    {todo.responsible}\n                    </h6>\n\n                  </div>\n                  \n                        <div className=\"card-body\">\n                          <p> {todo.description} </p>\n                        </div>\n                    \n                              <div className=\"card-footer\">\n                                <button className=\"btn btn-danger\" onClick={this.removeTodo.bind(this, i)}>\n                                  Delete\n                                </button>\n                              </div>\n\n              </div> \n            </div>\n           \n        )\n    })\n\n\n  // Aqui es verdaderamente donde se muestra el renderizado,  \n  // Se inicia con un 'div' cuyo nombre es \"App\", este componente tiene su\n  // propia hoja de estilos .css (App.css)\n  return (\n  \n\n   <div className=\"App\">\n      <NavBar />\n       <div className=\"container\">\n           <div className=\"row mt-5\">\n           <TodoForm onAddTodo={this.handleAddTodo} />\n           {todos}\n           </div>\n      </div>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}